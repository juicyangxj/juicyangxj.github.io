<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[读：我的脖子让我很不爽]]></title>
    <url>%2F2018%2F10%2F30%2F%E8%AF%BB%EF%BC%9A%E6%88%91%E7%9A%84%E8%84%96%E5%AD%90%E8%AE%A9%E6%88%91%E5%BE%88%E4%B8%8D%E7%88%BD%2F</url>
    <content type="text"><![CDATA[看的是电子书，几小时就看完了，我觉得女孩子值得看一下。 这本书以一个六十多岁的女士的口吻讲述了她不同年龄阶段的一些生活场景，经验之谈以及对生活的认识与态度。用诙谐搞笑的语气告诉我们一些她走过的坑，主人公是一个乐观，自信，有才华，果断的女性，她的人生可以说是非常精彩。作为二十几岁的女性读者，我在部分场景能感同身受，比如爱折腾爱打扮害怕老去，而真正面对老去，我们却也不能为力，只能垂死挣扎熬过去。正如我将来要面对的一些困难，我也只能忍住。 点此下载]]></content>
      <categories>
        <category>读后感</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个推推送实现方案]]></title>
    <url>%2F2018%2F07%2F25%2Fhbuilder%E6%8E%A8%E9%80%81%E6%8C%87%E5%8D%97-0%2F</url>
    <content type="text"><![CDATA[HBuilder推送功能已集成的包括：个推和小米推送。小米推送面向企业不考虑，那只能选择个推了，因为最近在做一个安卓的app，下面主要先讲安卓，苹果的略微带过。 安卓个推开发方案安卓注意点 用户若禁止该APP的推送，那自然是收不到消息的 Android rom厂商为了省电会禁止push进程开机自启、第三方清理软件也会杀掉push进程。因此要保证应用在后台运行状态。像qq、微信能“离线推送”，其实并非离线，大厂app早已手机厂商或第三方清理软件白名单，这些APP实际上还在运行。 安卓第一次安装APP成功立刻获取cid为字符串null，不知道为啥,因此我搞了个定时器循环读取它。 消息分类 普通消息会收到通知消息，事件都不触发服务器可以向安卓平台发送三种类型的普通消息“通知”“下载”“网址”，发送“通知”消息会启动APP，如果是“下载”消息则会调用系统的下载管理器下载指定文件，点击“网址”消息则会调用系统浏览器打开指定的网址。 流程个推平台发送普通消息-》用户收到通知消息-》用户点击消息-》启动应用 不管应用在线还是离线，在系统通知栏中显示消息，点击消息后启动应用（如果已经启动则从后台切换到前台），此消息不触发“click”事件。 符合格式的透传消息会收到通知消息 流程个推平台发送透传消息-》符合格式-》用户收到通知消息-》用户点击消息-》监听页面触发click事件 不管应用在线还是离线，如果透传数据格式符合“{title:’标题’,content:’内容’,payload:’数据’}”格式，则在系统通知栏中显示消息，点击消息后触发“click”事件，可通过msg.title获取标题、msg.content获取内容、msg.payload获取数据。 不符合格式的透传消息不会收到通知消息，但是会触发监听页面的“receive”事件 流程个推平台发送透传消息-》不符合格式-》应用在后台运行-》监听页面触发receive事件不管应用在线还是离线，如果透传数据格式不符合“{title:’标题’,content:’内容’,payload:’数据’}”格式，触发“receive”事件，可通过msg.payload获取完整透传数据。 本地创建的消息会收到通知消息点击消息后触发“click”事件，可通过msg.title获取标题、msg.content获取内容、msg.payload创建时可设置为“LocalMSG”，用于区分是点击的本地的还是符合格式的透传消息。 ##讲了那么多原理，到底应该选择哪一种推送呢?方案一：选择普通消息优点：简单，可以收到通知，前端不用咋处理缺点：点了推送指南启动应用（下载和网址先不考虑），不能做后续操作，角标可能会有问题；即时性差点，万一用户不点消息就直接进入app或者app正好打开着突然收到推送，那如何去局部更新那数据呢，估计还是只能靠轮询定时更新数据。当然，如果你的app不涉及局部数据变化或者方案三因为各种不可抗力因素走不通的话，当然选这个啦。 方案二：选择符合格式的透传消息优点：可以收到通知，点击通知后可以触发click事件，获取点击的数据。测试的时候发现居然透传消息推送过来可以选择强制启动应用，当然，是不敢用在应用中的啦~~。缺点：即时性应该差，万一用户不点消息就直接进入app或者app正好打开着突然收到推送，那如何去局部更新那数据呢，估计还是只能靠轮询定时更新数据。当然，如果你的app不涉及局部数据变化，同时又要点击消息打开某个模块的话，那就选这个吧。 方案三：选择不符合格式的透传消息优点：及时性好，通过receive收到消息后，可以立即更新数据并创建本地消息，本地消息点击后同样可以监听到click事件，并做后续处理缺点：稍微复杂点，但个人是很心水的。代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;script type="text/javascript" charset="utf-8"&gt; mui.init(); // 监听plusready事件 document.addEventListener("plusready", function() &#123; // 扩展API加载完毕，现在可以正常调用扩展API // 获取客户端标识信息 var cid=plus.push.getClientInfo().clientid; var count=0; var getcid = setInterval(function() &#123; cid = plus.push.getClientInfo().clientid; if(cid != "" &amp;&amp; cid != null &amp;&amp; cid != "null") &#123; mui.alert("cid=" + cid + "&amp;count=" + count); clearInterval(getcid); &#125; count++; &#125;, 20); //获得clientid，appid,appkey,token // 监听在线消息事件,不符合格式的透传消息 plus.push.addEventListener("receive", function( msg ) &#123; mui.alert("接收到不符合格式在线透传消息："+JSON.stringify(msg) ); var options = &#123;cover:false&#125;; var str = '欢迎使用Html5 Plus创建本地消息！';//msg.content plus.push.createMessage( str, "LocalMSG", options ); mui.alert( "创建本地消息成功！" ); //本地消息上下两个payload不一样。 &#125;, false ); // 监听点击消息事件,符合格式的透传消息或者本地消息 plus.push.addEventListener("click", function( msg ) &#123; // 判断是从本地创建还是离线推送的消息 mui.alert(JSON.stringify(msg) ); switch( msg.payload ) &#123; case "LocalMSG": mui.alert( "点击本地创建消息启动：" );//title和content里获得数据 break; default: mui.alert( "点击符合格式的透传消息启动："); break; &#125; &#125;, false ); &#125;) &lt;/script&gt; #ios个推1.普通消息应用在线：接收到消息后弹出提示框，点击“取消”按钮则关闭提示框，点击“确定”按钮则会发送透传数据触发“receive”事件（即使没有设置透传数据）。应用离线：如果设置Token值则通过APN推送离线信息，成功后在系统通知栏中显示消息，点击消息后启动应用（如果已经启动则从后台切换到前台），同时触发“click”事件，此时可通过js处理透传数据。如果没有设置Token值则在应用启动后通过应用在线模式推送通知。 2.透传消息应用在线：触发“receive”事件，可通过msg.payload获取完整透传数据。应用离线：如果设置Token值以及内容值则通过APN推送离线信息，成功后在系统通知栏中显示消息（显示通知的内容），点击消息后启动应用（如果已经启动则从后台切换到前台），同时触发“click”事件，此时可通过js处理透传数据；否则在应用启动后通过应用在线模式推送通知。 #结束语上述的描述可能有不准确之处，可以各取所需，放上来一个是方便大家，还有就是有错误的地方大家可以及时指出，( ￣3)(ε￣ ) 原文链接]]></content>
      <categories>
        <category>推送</category>
      </categories>
      <tags>
        <tag>个推</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过几句node.js为前端初学者写个常用工具]]></title>
    <url>%2F2018%2F07%2F25%2Fnode-js%E5%86%99%E4%B8%AA%E5%8A%A0%E5%BC%95%E5%8F%B7%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[具体是什么工具，我语言组织了好久还是觉得不够好，还是以几张图来告诉大家它实现的一个效果以及如何使用它。 效果图情景：小明是个切图仔，某天，他切完了所有的图准备对接数据啦。列表页代码如图1. 图1 某列表页代码。 小明喜欢偷懒，把某下拉刷新上拉加载的插件封装了一下，一切就绪，只需要在callback里面把字符串和真实数据拼接一下。然而这个项目那么多列表页，那么多重复的添加单引号和加号也太辛苦了吧，眼睛要看花掉了。于是，小明通过几句node.js的代码，轻轻松松就完成加单引号和加号的部分了，效果图如图2.图2 单引号和加号拼接完代码。 如何实现？小明是个前端切图仔，对后台的语言也不熟，想要读文件，编辑文件，再写文件想来想去只能通过node.js了。实现的过程走了很多误区，失败了几次，比如，通过readline逐行读取，但是中文字符是没有办法解析的，虽然能将就着用，但这个工具用完后还要去复制黏贴修改中文部分，那真还不如不用。最后还是找了了一个可以解析中文的办法，用二进制编码方式读取后再用GBK解码。代码server.js如图3。 图3 node.js读写并处理字符串。 如何使用？使用方法很简单首先环境是要下载并安装node.js,这里需要安装fs，和iconv-lite。 第一步，将需要处理的字符串复制到1.txt中 第二步，该目录下执行node server语句 第三步，打开生成的answer.txt去复制代码就可以啦。 小结对于整天在搬砖的初学者来说，我觉得这个工具可以节省不少时间。在写的过程中，因为我对node也是刚学，以实现效果为主，没思考太多，我在考虑识别换行的那个循环那也花了点时间的。仅给真正需要的人参考=。=，我是经常会使用到它，如果对你也有帮助的话，那就点个赞吧！ 原文链接]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A*寻路算法]]></title>
    <url>%2F2018%2F07%2F25%2FA-%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[你是否在做一款H5游戏的时候想创造一些游戏主角，让它们移动到指定的位置，避开墙壁和障碍物呢？下面的案例是由纯js实现的,由canvas绘图，并只考虑向上下左右四邻域移动。 效果展示图 核心思想12345678910111213141516//第一步：画棋盘，向外扩展一圈 var $map = drawmap(me.opts, me.$element);// 第二步：画障碍点和边界，初始化所有点,左上角为（0,0） drawpoint(me, $map);//这里默认把起点放入已检测点 var startnum = posToindex(me.opts.startY, me.opts.startX, me.opts.mapXnum); var endnum = posToindex(me.opts.endY, me.opts.endX, me.opts.mapXnum); me.closelist.push(me.wall[startnum]);//第三步：从起点开始上下左右找扩展点出去，并记录父子点对。如果该点status是0且从未放入过openlist，就放入openlist//从openlist中找F值最小的点组，我这里做了个优化，并选择点组中最后加入openlist的点放入closelist//从当前已检测点再向外检测，要么检测到终点就停止，要么待检测点全部检测完还找不到终点就停止。 searchroad(me, [me.opts.startY, me.opts.startX], startnum);//第四步:画检测的所有点，用红色细线标出，只需要把每个fatherson里的父子连起来就好了(这一步可以不画，跳过) drawroad(me);//第五步：画最终路线，黄色粗线标出。因为子元素的父元素只有一个，而一个父元素有多个子元素（比较难找），所以我们选择从终点往起点找，把能连的线全部连起来就好 drawFinalRoad(me.fatherson, startnum, endnum, me); 我是如下初始化参数的： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657var me = this;// 原型中的this不是指的原型对象，而是调用对象。//用于存地图的长和宽me.opts = $.extend(true, &#123;&#125;, &#123; //用于设弹窗默认值 mapXnum: 10, mapYnum: 10, startX: 3, startY: 3, endX: 6, endY: 6, wallnum: 10, map_Per: 40//每个格子的长度&#125;, options);me.wall = [];//整张图信息，村边界和所有的障碍物的坐标标1，起点标2，终点标3,其余标0，距离左边，距离右边//index从上往下数数，从0开始，下次用二维数组做试试。。。一开始咋先用了一维。。。me.openlist = [];//待检测的点me.closelist = [];//已检测的点me.fatherson = [];//检测过程中记录父子关系对，父节点向上下左右寻找子节点时记录一下var num = 0;for (var i = 0; i &lt; Number(me.opts.mapYnum) + 2; i++) &#123; for (var j = 0; j &lt; Number(me.opts.mapXnum) + 2; j++) &#123; if (i == 0 || i == Number(me.opts.mapYnum) + 1 || j == 0 || j == Number(me.opts.mapXnum) + 1) &#123; me.wall.push(&#123; status: 1, pos: [i, j], f_score: 9999, index: num++ &#125;); &#125; else if (i == me.opts.startY &amp;&amp; j == me.opts.startX) &#123; me.wall.push(&#123; g_score: 0, status: 2, pos: [i, j], index: num++ &#125;); &#125; else if (i == me.opts.endY &amp;&amp; j == me.opts.endX) &#123; me.wall.push(&#123; g_score: 0, h_score: 0, f_score: 0, status: 3, pos: [i, j], index: num++ &#125;); &#125; else &#123; me.wall.push(&#123; g_score: 0, h_score: Math.abs(i - me.opts.endY) + Math.abs(j - me.opts.endX), f_score: 0, status: 0, pos: [i, j], index: num++, inopen: 0 &#125;); &#125; &#125;&#125; 小结我是这么理解的，Dijkstra算法就是从起点开始一圈一圈向外扩散，直到扩散到终点，这样做肯定慢，但还是能找到一条最短路径。贪婪算法从直观上理解就是用最快的方法来解决问题，主要目标是快，从数学上来理解就是在做判断时以当前最优解为基础，每次取的都是当前位置距离终点最近的点，因为算法是取的局部最优解，没有考虑以后的问题，所以整体上是很难找到最短路径的。贪婪是每个人都有的，但也要适可而止。我们的目标是要找到一条最短路径的前提下，速度适当的要快一点。于是，A*算法就应运而生了，既考虑了起点，又考虑了终点（要选取适合的启发函数）。明白了它大概的思想后，童鞋们就可以开始摸索啦~~~嘻嘻 原文链接代码链接]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[公司项目推介会稿子]]></title>
    <url>%2F2018%2F07%2F06%2F%E5%85%AC%E5%8F%B8%E9%A1%B9%E7%9B%AE%E6%8E%A8%E4%BB%8B%E4%BC%9A%E7%A8%BF%E5%AD%90-1%2F</url>
    <content type="text"><![CDATA[大家好，我在领悟主要负责web前端相关开发和维护工作，2018年新项目包括惠山司法局微信项目、智慧白沙大屏、徐霞客智慧党建app等等，而维护的工作比较杂比较多，近期也在对以前的代码进行优化以及组件化，减少二次开发的时间。今天主要讲个比较有代表性的项目：惠山司法局微信项目。这个项目特殊在于需求层层升级，如何在一开始就避免大量代码重构上还是比较很重要的。起初的需求是，一套代码在微信端适用，同时保证大屏上能演示，微信浏览器打开也能正常使用。矛盾点在于：手机端字体图片都偏小，而在不清楚大屏实际尺寸下，保证大屏演示要整体放大不失真，直接浏览器缩放显然是不能做到的，因此采取定义根元素的尺寸，字体大小和图片大小随屏幕尺寸成一定比例变化，再配合响应式布局最终实现了现在的效果。同时要避免使用任何触摸相关事件，毕竟电脑端没有手指触摸一说后来新增了：身份证号识别的功能，借助于百度现成的接口，在正伟的帮助下很轻松的就完成了，而我作为前端就想用户体验最佳，就做了个身份证扫描仿真的效果。效果如下。最后客户要求在电脑端实现拍照以及身份证识别的功能，电脑端图片处理的逻辑其实和微信端很不一样。同时，又了解到电脑拍照要求必须是https域名下才能正常，百度学习了如何电脑打开摄像头，如何拍照，如何生成图片，如何把图片提交给后台后，为了减少代码重构。采用和手机端一样的逻辑过程，在电脑端模拟了相机界面，最终效果如下。 接下来项目会越来越多吧，做的多了会发现重复工作会很多，所以我最近正在努力把历史遗留问题先一一解决，同时把杂乱无章的代码能整理的就整理优化一下吧。]]></content>
      <categories>
        <category>公司相关</category>
      </categories>
      <tags>
        <tag>公司</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[与客户交涉有感]]></title>
    <url>%2F2018%2F06%2F29%2F%E4%B8%8E%E5%AE%A2%E6%88%B7%E4%BA%A4%E6%B6%89%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[对于人际交往，我真是满脑子问号了。 为什么？ 对于客户提的要求，我总是很重视，巴不得立刻帮他们解决，然后听到他们说感谢就很开心了。但现实是，客户有问题立刻态度急促地质问，我总是安抚不要着急并找人去解决，解决好了就回复个好的，若我说没法解决，则不回复已经很好了。但是，我的同事却是这样做的，对于客户的问题，可以拖好几天甚至更久，客户找他他也偶尔回复个好的、收到，但是并没有去处理。但客户对他却是一直很有礼貌，不会态度不好甚至会有敬语。我不知道自己到底哪个环节做错了，也不确定自己的热心肠，急性子对于职场上是否不适合。 为什么？ 谈恋爱时，朋友总和我说，谁先认真谁主动谁就输了，我虽听进去了，但对于喜欢的人，因为害怕失去还是会很主动的去表达心意。果然，我和朋友也形成了鲜明的对比，朋友是她男朋友追了好几个月追到的，我很早表明了心意却经常害怕他生气而不敢过分任性，我其实很反感做懂事听话的人，但本性指引我要懂事。有时候忍不住发了脾气，整个人就会感觉很愧疚。 可能每个人的性格不同，但小时候的好脾气在社会中真的不讨好吗？会有很多人故意调侃，遇到社会纠纷，被故意欺负我觉得对方也不容易，不要太小心眼。但有的时候开始自我怀疑，觉得满是委屈，要想在社会做一个厉害的人，是否我该做出些改变？]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人际交往</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我]]></title>
    <url>%2F2018%2F06%2F26%2F%E5%85%B3%E4%BA%8E%E6%88%91%2F</url>
    <content type="text"><![CDATA[90后女孩，目前在江阴，从事前端开发。我所在的这座城市很小，一直挺喜欢的一句话：编剧，重点在藏。你要表达的东西直白说出来就没有美感了，要藏在深处，让人觉得一切是自然而然地表现出来。而这种微妙的感觉每个人所领悟的必然也不一样，这世上的选择并没有正确答案，随心而走，一切都是最好的安排。 我盼望着也等待着。 （更新于2018-6-28）]]></content>
      <categories>
        <category>关于我</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Q:你知道如何用line-height使多行文字垂直居中吗？]]></title>
    <url>%2F2018%2F06%2F20%2FQ-%E4%BD%A0%E7%9F%A5%E9%81%93%E5%A6%82%E4%BD%95%E7%94%A8line-height%E4%BD%BF%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%90%97%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[我们先看运行效果： 知识点 line-height（行高） : 指的是两行文字间基线之间的距离，而实际撑开div高度的不是height，而是line-height。 line box : 每一行称为一条line box，它又是由这一行的许多inline box组成，它的高度可以直接由最大的line-height决定。很多条line box的高度垂直堆叠形成我们见到的div或是p标签之类的父元素高度了。无论line box所占据的高度是多少，其占据的空间都是与文字内容公用水平中垂线的。它的垂直居中的性质可以用来实现文字或图片的垂直居中对齐。 行间距 - 行内框高度 ：行间距是font-size与line-height的差值，被分成两半在内容区的上下行内框高度（替换元素）=内容区宽度行内框高度（非替换元素）=line-height 了解更多替换元素非替换元素的区别点这 一行文字垂直居中根据知识点3，现在可理解只设置行高后，内容区上下方自动填充行间距，使得文字垂直居中。 1&lt;p class="single_line"&gt;这是一行文字这是一行文字这是一行文字&lt;/p&gt; 123.single_line&#123; line-height:150px; border:1px dashed #cccccc; padding-left:5px;font-size:12px;&#125; 多行文字垂直居中要实现高度不固定的文字垂直居中使用padding就好了。对于高度固定的div，里面文字单行或多行显示，字体有大有小怎么办呢？可以借助于line-height。 123456&lt;p class="mulit_line"&gt; &lt;span style="font-size:12px;"&gt;这里是高度为150px的标签内的多行文字，文字大小为12像素。 &lt;br&gt;这里是第二行，用来测试多行的显示效果。 &lt;/span&gt; &lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;/p&gt; inline-block属性使得外面包了一层line box。根据知识点2以及内联元素默认基线对齐，给span和i都设置为vertical-align:middle即可。实际应用中可将i的width设为0，案例中1px为了帮助理解用。 12345678910111213141516.mulit_line&#123; border:1px dashed #cccccc; padding-left:5px;&#125;.mulit_line span&#123; display:inline-block; vertical-align:middle;&#125;.mulit_line i&#123; width:1px; display:inline-block; vertical-align:middle; font-size:0; background:red; line-height:150px;&#125; 看完整代码点这 更多内容欢迎互相交流一下。 原文链接]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Q:你了解异步编程、进程、单线程、多线程吗？]]></title>
    <url>%2F2018%2F06%2F20%2FQ-%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E5%8D%95%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%97%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[相关定义 Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。 同步：一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去。 异步：进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。 进程：狭义上，就是正在运行的程序的实例。广义上，进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。 线程：线程是程序中一个单一的顺序控制流程。进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位。指运行中的程序的调度单位。 单线程：单线程在程序执行时，所走的程序路径按照连续顺序排下来，前面的必须处理好，后面的才会执行。单线程就是进程里只有一个线程。 多线程：在单个程序中同时运行多个线程完成不同的工作，称为多线程。 知识点 js是单线程的 JS运行在浏览器中，是单线程的，每个window一个JS线程，既然是单线程的，在某个特定的时刻只有特定的代码能够被执行，并阻塞其它的代码。而浏览器是事件驱动的，浏览器中很多行为是异步的，会创建事件并放入执行队列中，JavaScript引擎是单线程处理它的任务队列。当异步事件发生时，鼠标点击事件发生、定时器触发事件发生、XMLHttpRequest完成回调触发等，将他们放入执行队列，等待当前代码执行完成。 浏览器不是单线程的 虽然JS运行在浏览器中，是单线程的,但浏览器不是单线程的，例如Web kit引擎，可能有如下线程： JavaScript引擎线程 界面渲染线程 浏览器事件触发线程 HTTP请求线程 当一个异步事件发生的时候，它就进入事件队列。浏览器有一个内部大消息循环，Event Loop（事件循环），会轮询事件队列并处理事件。比如，浏览器当前正在忙于处理onclick事件，这时window onSize事件发生了，这个异步事件就被放入事件队列等待处理，只有前面的处理完毕了，空闲了才会执行这个事件。 为什么JavaScript是单线程的却能让AJAX异步发送和回调请求，为什么setTimeout也看起来像是多线程的？ Ajax请求确实是异步的，这请求是由浏览器新开了一个线程请求，事件回调的时候是放入Event loop单线程事件队列等候处理。当浏览器空闲的时候出队列任务被处理，JavaScript引擎始终是单线程运行回调函数、单线程处理它的任务队列。 setTimeout(func, 0)神奇在哪儿？那就是告诉js引擎，在0ms以后把func放到主事件队列中，等待当前的代码执行完毕再执行，注意：重点是改变了代码流程，把func的执行放到了主事件队列中。这就是它的神奇之处了。它的用处有三个： 让浏览器渲染当前的变化（很多浏览器UI render和js执行是放在一个线程中，线程阻塞会导致界面无法更新渲染） 重新计算script运行时间，即重新判断”script is running too long”这个警告 改变了执行顺序 详细解释见下一篇文章《巧用setTimeout(func, 0)》。(2017-11-30注：本来想写的，偶然翻到一篇文章《这一次，彻底弄懂 JavaScript 执行机制》觉得已经写得很好了，就收藏啦(#^.^#)) 异步编程三种方法一：回调函数这是异步编程最基本的方法。假定有两个函数f1和f2，后者等待前者的执行结果。 12 f1(); f2(); 如果f1是一个很耗时的任务，可以考虑把f2写成f1的回调函数。 123456 function f1(callback)&#123; setTimeout(function () &#123; // f1的任务代码 callback(); &#125;, 1000); &#125; 执行代码就变成下面这样： 1 f1(f2); 采用这种方式，我们把同步操作变成了异步操作，f1不会堵塞程序运行。回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，流程会很混乱，而且每个任务只能指定一个回调函数。 二、事件监听另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。还是以f1和f2为例。首先，为f1绑定一个事件（这里采用的jQuery的写法）。 1 f1.on('done', f2); 上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写： 123456 function f1()&#123; setTimeout(function () &#123; // f1的任务代码 f1.trigger('done'); &#125;, 1000); &#125; f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2。这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以“去耦合”，有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。 三、Promises对象Promise 是异步编程的一种解决方案，比传统的解决方案“回调函数”和“事件”——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。基本用法如下：12345678910111213const promise = new Promise(function(resolve, reject) &#123; // ... some code if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;);promise.then(function(value) &#123;// success&#125;, function(error) &#123; // failure&#125;); 下面列出异步操作失败、抓捕异常的另一种写法123456const promise = new Promise(function(resolve, reject) &#123; reject(new Error(&apos;test&apos;));&#125;);promise.catch(function(error) &#123; console.log(error);&#125;); 这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚，可以实现许多强大的功能。比如，指定多个回调函数等等。 原文链接]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Q:为何img，input等内联元素可设置宽高？]]></title>
    <url>%2F2018%2F06%2F20%2FQ-%E4%B8%BA%E4%BD%95img%EF%BC%8Cinput%E7%AD%89%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E5%8F%AF%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[简答：因为&lt;img&gt;、&lt;input&gt;属于替换元素，替换元素一般有内在尺寸和宽高比(auto时起作用)，所以具有width和height，可以设定。 细答：元素是文档结构的基础，在CSS中，每个元素生成了一个包含了元素内容的框（box，也译为“盒子”）。但是不同的元素显示的方式会有所不同，例如&lt;div&gt;和&lt;span&gt;就不同，而&lt;strong&gt;和 &lt;p&gt;也不一样。 1. 替换和不可替换元素从元素本身的特点来讲，可以分为替换和不可替换元素。 a) 替换元素替换元素 : 浏览器根据元素的标签和属性，来决定元素的具体显示内容。 例如浏览器会根据&lt;img&gt;标签的src属性的值来读取图片信息并显示出来;根据&lt;input&gt;标签的type属性来决定是显示输入框，还是单选按钮等。HTML中的&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;都是替换元素。这些元素往往没有实际的内容，即是一个空元素,浏览器会根据元素的标签类型和属性来显示这些元素。 b) 不可替换元素HTML 的大多数元素是不可替换元素，即其内容直接表现给用户端（例如浏览器）。 例如&lt;p&gt;段落的内容&lt;/p&gt;，段落&lt;p&gt;是一个不可替换元素，文字“段落的内容”全被显示。 2. 块级和行内元素除了可替换元素和不可替换元素的分类方式外，CSS2.1中元素还有另外的分类方式：块级元素（block-level）和行内元素（inline-level，也译作“内联”元素）。 a) 块级元素在视觉上被格式化为块的元素，最明显的特征就是默认在横向充满其父元素的内容区域，而且在其左右两边没有其他元素，即独占一行。 典型的块级元素有：&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;到&lt;h6&gt;，等等；通过CSS设定了浮动（float属性）以及设定显示（display）属性为“block”或“list-item”的元素都是块级元素。但是浮动元素比较特殊，由于浮动，其旁边可能会有其他元素的存在。而“list-item”（列表项&lt;li&gt;），会在其前面生成圆点符号，或者数字序号。 b) 行内元素行内元素不形成新内容块，即在其左右可以有其他元素。 例如&lt;a&gt;、&lt;span&gt;、&lt;strong&gt;等，都是典型的行内级元素。display属性等于“inline”的元素都是行内元素。 结语 几乎所有的替换元素都是行内元素，例如&lt;img&gt;、&lt;input&gt;等等。不过元素的类型也不是固定的，通过设定CSS 的display属性，可以使行内元素变为块级元素，也可以让块级元素变为行内元素。 替换元素一般有内在尺寸，所以具有width和height，可以设定。例如你不指定img的width和height时，就按其内在尺寸显示，也就是图片被保存的时候的宽度和高度。对于表单元素，浏览器也有默认的样式，包括宽度和高度。 补充知识点inline元素默认是基线对齐的 vertical-align=baseline 原文链接]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[script中defer和async的区别]]></title>
    <url>%2F2018%2F06%2F20%2Fscript%E4%B8%ADdefer%E5%92%8Casync%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[定义 defer：此布尔属性被设置为向浏览器指示脚本在文档被解析后执行。async：设置此布尔属性，以指示浏览器如果可能的话，应异步执行脚本。 对于defer，我们可以认为是将外链的js放在了页面底部。js的加载不会阻塞页面的渲染和资源的加载。不过defer会按照原本的js的顺序执行，所以如果前后有依赖关系的js可以放心使用。 对于async，这个是html5中新增的属性，它的作用是能够异步的加载和执行脚本，不因为加载脚本而阻塞页面的加载。一旦加载到就会立刻执行在有async的情况下，js一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果js前后有依赖性，用async，就很有可能出错。 区别相同点： 加载文件时不阻塞页面渲染 对于inline的script（内联脚本）无效 使用这两个属性的脚本中不能调用document.write方法 有脚本的onload的事件回调 不同点： html的版本html4.0中定义了defer；html5.0中定义了async 浏览器兼容性 Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari async attribute (Supported) 3.6 (1.9.2) 10 — (Supported) defer attribute (Supported) 3.5 (1.9.1) 4 — (Supported) 执行时刻每一个async属性的脚本都在它下载结束之后立刻执行，同时会在window的load事件之前执行。所以就有可能出现脚本执行顺序被打乱的情况；每一个defer属性的脚本都是在页面解析完毕之后，按照原本的顺序执行，同时会在document的DOMContentLoaded之前执行。 结语简单的来说，使用这两个属性会有三种可能的情况 如果async为true，那么脚本在下载完成后异步执行。 如果async为false，defer为true，那么脚本会在页面解析完毕之后执行。 如果async和defer都为false，那么脚本会在页面解析中，停止页面解析，立刻下载并且执行。 最后给一点个人的建议，无论使用defer还是async属性，都需要首先将页面中的js文件进行整理，哪些文件之间有依赖性，哪些文件可以延迟加载等等，做好js代码的合并和拆分，然后再根据页面需要使用这两个属性。 原文链接]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
